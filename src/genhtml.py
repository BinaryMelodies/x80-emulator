#! /usr/bin/python3

import os
import sys
from database import *

#### TODO: testing

SPLIT_HTML = True

def begin_html(fp, title = 'Intel 8080/Zilog Z80 family CPUs'):
	print("<!-- This file is automatically generated from " + sys.argv[2] + " -->", file = fp)
	print("""<html>
<head>""", file = fp)
	print(f"<title>{title}</title>", file = fp)
	print("""<style>
td
{
	text-align: center;
}

.new
{
	font-weight:bold;
	color:green;
}

.replaced
{
	font-weight:bold;
	color:red;
}

.undefined
{
	background:gray;
}

.replaced.undefined
{
	background:red;
}

.documented
{
	font-weight:bold;
	color:orange;
}

.invalid
{
	background:red;
}

.undocumented
{
	background:pink;
}

.duplicate
{
	font-style:italic;
	background:plum;
}

.fictional
{
	font-weight:bold;
	color:magenta;
}
</style>
</head>
<body>""", file = fp)

def end_html(fp):
	print("</body>", file = fp)
	print("</html>", file = fp)

def make_href(tag):
	if SPLIT_HTML:
		return f"href='{tag}.html' target='_blank'"
	else:
		return f"href='#{tag}'"

def begin_part(tag, fp, title = None):
	if SPLIT_HTML:
		end_html(fp)
		fp.close()
		fp = open(os.path.join(os.path.dirname(sys.argv[3]), tag + '.html'), 'w')
		assert title is not None
		begin_html(fp, title)
		print(f"<a href='{os.path.basename(sys.argv[3])}.html' target='_blank'>Back to top</a>", file = fp)
	else:
		print("<a id='" + tag + "'/>", file = fp)
	return fp

def fetch_title(cpu, no_years = False):
	global DESCRIPTIONS, CPUNAMES
	if cpu in DESCRIPTIONS:
		elements = []
		for key, value in DESCRIPTIONS[cpu]:
			if key == 'year':
				elements.append(('year', value))
			elif key == 'name':
				elements.append(('name', value))
			elif key == 'fullname':
				elements[-1] = ('name', value)
		index = 0
		text = ''
		last_year = True
		for element in elements:
			if no_years and element[0] == 'year':
				continue
			if text != '' and not last_year:
				text += ', '
			text += element[1]
			if element[0] == 'year':
				text += ' &mdash; '
				last_year = True
			else:
				last_year = False
		return text
	else:
		return CPUNAMES.get(cpu, cpu)

def produce_cpu_reference(ref):
	if ref not in REFERENCES:
		text = '<s>' + ref + '</s>'
		print("Warning: reference " + ref + " in description has no referent", file = sys.stderr)
	else:
		href, name = REFERENCES[ref]
		text = f"<a {make_href(href)}>{name}</a>"
	return text

def convert_value_text(value):
	while '#' in value:
		ix1 = value.find('#')
		ix2 = value.find('#', ix1 + 1)
		ref = value[ix1 + 1:ix2]
		value = value[:ix1] + produce_cpu_reference(ref) + value[ix2 + 1:]
	return value

def generate_html():
	global CPUS, CPUSEQUENCE
	fp = open(sys.argv[3] + '.html', 'w')

	begin_html(fp)
	print("""<h1>List of CPU architectures</h1>
<ul>""", file = fp)
	cpus = []
	for cpu in CPUSEQUENCE:
		#if CPUNAMES[cpu] == '-':
		#	continue
		print(f"<li><a {make_href(cpu)}>" + fetch_title(cpu) + "</a></li>", file = fp)
		cpus.append(cpu)
	for cpu in CPUS:
		if CPUNAMES[cpu] == '-' or cpu in CPUSEQUENCE:
			continue
		print(f"<li><a {make_href(cpu)}>" + fetch_title(cpu) + "</a></li>", file = fp)
		cpus.append(cpu)
	print("<h1>Other tables</h1>", file = fp)
	print(f"<li><a {make_href('z280_z380')}>Comparing Z280 and Z380</a></li>", file = fp)
	print(f"<li><a {make_href('list_op')}>List by opcodes</a></li>", file = fp)
	print(f"<li><a {make_href('list_mnem')}>List by mnemonics</a></li>", file = fp)
	print("</ul>", file = fp)
	for cpu in cpus:
		fp = begin_part(cpu, fp, fetch_title(cpu, True))
		print("<h1>" + fetch_title(cpu) + "</h1>", file = fp)

		current_context = None
		latest_key = None
		reglist = []
		regmap = {}
		regparam = {}
		reg_offset = 0
		for key, value in DESCRIPTIONS.get(cpu, []):
			if current_context == 'dl' and key not in {'key', 'value'}:
				print("</dl>", file = fp)
				current_context = None

			if key == 'text':
				print(f"<p>{convert_value_text(value)}</p>", file = fp)
			elif key == 'key':
				if current_context != 'dl':
					current_context = 'dl'
					print("<dl>", file = fp)
				print(f"<dt>{value}</dt>", file = fp)
			elif key == 'value':
				if current_context == 'dl':
					print(f"<dd>{convert_value_text(value)}</dd>", file = fp)

			if key == 'reg':
				reglist.append(value)
				regmap[value] = []
				if value not in regparam:
					regparam[value] = {}
			elif key == 'field':
				if regmap[reglist[-1]] == []:
					reg_offset = 0
				else:
					new_offset = regmap[reglist[-1]][-1]['offset'] + regmap[reglist[-1]][-1]['width']
					reg_offset = max(reg_offset, new_offset)
				regmap[reglist[-1]].append({key: value, 'offset': reg_offset, 'width': 1})
			elif key in {'offset', 'width'}:
				regmap[reglist[-1]][-1][key] = int(value)
			elif key in {'style'}:
				regmap[reglist[-1]][-1][key] = value
			elif key in {'next', 'times'}:
				regparam[reglist[-1]][key] = value
				if key == 'next':
					if value not in regparam:
						regparam[value] = {}
					regparam[value]['//prev'] = reglist[-1]
			elif key == 'end' and value == 'table':
				columns = []
				has_times = False
				for reg in reglist:
					if '//prev' in regparam[reg]:
						continue
					index = 0
					while reg is not None:
						if index >= len(columns):
							columns.append(set())
						for field in regmap[reg]:
							columns[index].add(field['offset'])
							columns[index].add(field['offset'] + field['width'])
						if 'times' in regparam[reg] and 'next' not in regparam[reg]:
							has_times = True
						reg = regparam[reg].get('next')
						index += 1

				print("<table border='1'>", file = fp)
				print("<tr>", file = fp)
				for index, column in enumerate(columns):
					print("<td style='background:gray;'/>", file = fp)
					widths = []
					last = -1
					for col in sorted(column):
						widths.append(col - last)
						last = col
					widths.pop(0)
					titles = []
					offset = 0
					for width in widths:
						if width == 1:
							titles.append(f'{offset}')
						else:
							titles.append(f'{offset}:{offset + width - 1}')
						offset += width
					for width, title in zip(reversed(widths), reversed(titles)):
						print(f"<td width='{36 * width}'>{title}</td>", file = fp)
				if has_times:
					print("<td style='background:gray;'/>", file = fp)
				print("</tr>", file = fp)

				for reg in reglist:
					if '//prev' in regparam[reg]:
						continue
					print("<tr>", file = fp)
					skipped = 0
					for index, column in enumerate(columns):
						print(f"<td><b>{reg}</b></td>", file = fp)
						tds = [None] * (len(column) - 1)
						for field in regmap[reg]:
							offset = field['offset']
							style = field.get('style')
							colindex = sum(1 for col in column if field['offset'] + field['width'] < col)
							colspan = sum(1 for col in column if field['offset'] <= col < field['offset'] + field['width'])
							tds[colindex] = (colspan, style, field['field'])
						tdix = 0
						while tdix < len(tds):
							if tds[tdix] is None:
								for tdi in range(tdix + 1, len(tds)):
									if tdi is not None:
										break
								else:
									tdi = len(tds)
								tds[tdix] = (tdi - tdix, None, None)
								tdix = tdi
							else:
								(colspan, style, text) = tds[tdix]
								tdix += colspan
						tdix = 0
						while tdix < len(tds):
							(colspan, style, text) = tds[tdix]
							td = '<td'
							if colspan > 1:
								td += f" colspan='{colspan}'"
							if text is None:
								td += " style='background:gray;'/>"
							else:
								if style == 'inaccessible':
									text = '<i>' + text + '</i>'
								elif style == 'unalterable':
									td += " style='background:lightgray;'"
								elif style == 'undocumented':
									text += "<sup title='undocumented'>*</sup>"
								td += f">{text}</td>"
							print(td, file = fp)
							tdix += colspan
						times = regparam[reg].get('times')
						reg = regparam[reg].get('next')
						if reg is None:
							for column in columns[index + 1:]:
								# header plus #columns which is 1 more
								skipped += len(column)
							break
					if times is None and has_times:
						skipped += 1
					if skipped == 1:
						print("<td style='background:gray;'/>", file = fp)
					elif skipped > 1:
						print(f"<td colspan='{skipped}' style='background:gray;'/>", file = fp)
					if times is not None:
						print(f"<td>&times; {times}</td>", file = fp)
					print("</tr>", file = fp)
				print("</table>", file = fp)

				reglist = []
				regmap = {}
				regparam = {}
				reg_offset = 0

		for h in sorted(T.get(cpu, {}).keys()):
			if T[cpu][h].count(None) == 256:
				continue
			if h != '':
				print("<a id='" + cpu + "_" + h.replace(' ', '_') + "'/>", file = fp)
			print("<h2>" + ('Main table' if h == '' else h) + "</h2>", file = fp)
			if h == '':
				# legend
				print("<ul>", file = fp)
				predecessor = PREDECESSOR.get(cpu)
				if predecessor is not None:
					print(f"<li><span class='new'>Green</span> marks new instructions to the {produce_cpu_reference(predecessor)}.</li>", file = fp)
					print(f"<li><span class='replaced'>Red</span> marks new instructions replacing earlier ones for the {produce_cpu_reference(predecessor)}.</li>", file = fp) # TODO: when is this needed?
					print(f"<li><span class='documented'>Orange</span> marks instructions present but undocumented in {produce_cpu_reference(predecessor)} and documented for the {REFERENCES[cpu][1]}.</li>", file = fp) # TODO: when is this needed?
					# invalid
				print(f"<li><span class='undocumented'>Pink background</span> marks undocumented instructions.</li>", file = fp) # TODO: when is this needed?
				print(f"<li><span class='duplicate'>Plum background</span> marks duplicate instructions.</li>", file = fp) # TODO: when is this needed?
				print("</ul>", file = fp)
			print("<table border='1'>", file = fp)
			print("<tr>", file = fp)
			print("<td/>", file = fp)
			for i in range(16):
				print(f"<td width='180'><tt>*{i:01X}</tt></td>", file = fp)
			print("</tr>", file = fp)
			for i in range(256):
				if i % 16 == 0:
					print("<tr>", file = fp)
					print(f"<td height='45'><tt>{i // 16:01X}*</tt></td>", file = fp)
				value = T[cpu][h][i]
				if type(value) is str:
					print("<td style='text-align:center;' class='duplicate'><tt><a href='#" + cpu + "_" + value.replace(' ', '_') + "'>&rarr; " + value + "</a></tt></td>", file = fp)
				elif value is not None:
					pred = PREDECESSOR.get(cpu)
					style = None
					if pred in T and h in T[pred]:
						oldvalue = T[pred][h][i]
						if oldvalue is None:
							style = 'new'
						elif oldvalue.style in {'undocumented', 'duplicate'}:
							style = 'documented' if oldvalue == value or value.style == 'updated' else 'new'
						elif oldvalue != value and oldvalue.style not in {'updated', 'fictional'}:
							style = 'replaced'
					else:
						style = 'new'
					if value.style == 'fictional':
						if style is None or style == 'new':
							style = 'fictional'
						else:
							print("Warning: $" + text, file = sys.stderr)
					elif value.style is not None and value.style != 'updated':
						style = value.style
					textlist = []
					for form in value.forms:
						text = repr(form)
						if cpu in {'z80', 'z180', 'ez80', 'sm83'}:
							text = text.replace('[W]', '')
							text = text.replace('[W*]', '')
							text = text.replace('[A],', '')
						elif cpu in {'z280', 'z380'}:
							text = text.replace('[W]', 'W')
							text = text.replace('[W*]', 'W')
							text = text.replace('[A],', 'A,')
						elif cpu in {'i8i80', 'i80', 'i85'}:
							text = text.replace('[W]', 'W')
							text = text.replace('[W*]', 'W')
						if cpu != 'z380':
							text = text.replace('#~', '#')
						textlist.append(text)
					text = '<br/>'.join(textlist)
					if cpu == 'z280' and len(value.ddir) != 0:
#						text += "<br/>&nbsp;&nbsp;&nbsp;&nbsp;<span style='font-style:italic;font-weight:bold;color:red;'>" + ' '.join(sorted(value.ddir)) + "</span>"
						text += "<br/><span style='font-style:italic;font-weight:bold;color:red;'>" + ' '.join(sorted(value.ddir)) + "</span>"
					if cpu == 'z380':
#						text += "<br/>&nbsp;&nbsp;&nbsp;&nbsp;<span style='font-style:italic;font-weight:bold;color:blue;'>" + ' '.join(sorted(value.ddir)) + "</span>"
						text += "<br/><span style='font-style:italic;font-weight:bold;color:blue;'>" + ' '.join(sorted(value.ddir)) + "</span>"
					print("<td style='text-align:center;'" + (" class='" + style + "'" if style is not None else "") + "><tt>" + text + "</tt></td>", file = fp)
				else:
					code = f'{i:02X}'
					if h != '':
						code = h + ' ' + code
					if code in T[cpu] and T[cpu][code].count(None) != 256:
						style = None
						pred = PREDECESSOR.get(cpu)
						if pred in T and code not in T[pred]:
							style = 'new'
						print("<td style='text-align:center;'" + (" class='" + style + "'" if style is not None else "") + "><tt><a href='#" + cpu + "_" + code.replace(' ', '_') + "'>&rarr; " + code + "</a></tt></td>", file = fp)
					else:
						pred = PREDECESSOR.get(cpu)
						style = ''
						if pred in T and h in T[pred]:
							oldvalue = T[pred][h][i]
							if oldvalue is not None and type(oldvalue) is not str and oldvalue.style not in {'undocumented', 'duplicate'}:
								style = ' replaced'
							elif code in T[pred]:
								style = ' replaced'
						print(f"<td class='undefined{style}'/>", file = fp)
				if i % 16 == 15:
					print("</tr>", file = fp)
			print("</table>", file = fp)
	fp = begin_part('z280_z380', fp, 'Comparing Z280 and Z380')
	print("<h1>Comparing Z280 and Z380</h1>", file = fp)
	H = set(T['z280'].keys())
	H.update(T['z380'].keys())
	H = list(sorted(H))
	for h in H:
		if (h not in T['z280'] or T['z280'][h].count(None) == 256) \
		and (h not in T['z380'] or T['z380'][h].count(None) == 256):
			continue
		print("<h2>" + ('Main table' if h == '' else h) + "</h2>", file = fp)
		print("<table border='1'>", file = fp)
		print("<tr>", file = fp)
		print("<td/>", file = fp)
		for i in range(16):
			print(f"<td><tt>*{i:01X}</tt></td>", file = fp)
		print("</tr>", file = fp)
		for i0 in range(16):
			empty = {0, 1}

			for k0 in range(16):
				i = i0 * 16 + k0
				value2 = T['z280'][h][i] if h in T['z280'] else None
				value3 = T['z380'][h][i] if h in T['z380'] else None
				if value2 == value3:
					continue
				if value2 is not None:
					empty.discard(0)
				if value3 is not None:
					empty.discard(1)

			for j0 in range(2):
				for k0 in range(16):
					if len(empty) == 1:
						if j0 in empty:
							continue
					if k0 == 0:
						print("<tr>", file = fp)
						if j0 == 0 or len(empty) == 1:
							print(f"<td rowspan='2'><tt>{i0:01X}*</tt></td>", file = fp)
					i = i0 * 16 + k0
					value0 = T['z80'][h][i] if h in T['z80'] else None
					value1 = T['z180'][h][i] if h in T['z180'] else None
					value2 = T['z280'][h][i] if h in T['z280'] else None
					value3 = T['z380'][h][i] if h in T['z380'] else None
					if value2 == value3:
						if j0 != 0 and len(empty) != 1:
							continue
						same = True
						value = value2
					else:
						same = False
						value = (value2, value3)[j0]
					rowspan = same
					if len(empty) == 1:
						rowspan = True
					if value is None:
						print("<td" + (" rowspan='2'" if rowspan else "") + " style='background:gray;'/>", file = fp)
					else:
						color = ""
						if value0 != value:
							if same:
								color = 'magenta'
							elif (j0 == 1 or empty == {0}) and value1 == value3:
								color = 'blue'
							else:
								color = ['red', 'green'][j0]
							color = " style='color:" + color + ";'"
						text = '<br/>'.join(map(repr, value.forms))
						if not same and j0 == 0:
							text = text.replace('#~', '#')
						#text = text.replace('[W]', 'W')
						#text = text.replace('[A],', 'A,')
						print("<td" + (" rowspan='2'" if rowspan else "") + color + "><tt>" + text + "</tt></td>", file = fp)
					if k0 == 15:
						print("</tr>", file = fp)
						if len(empty) == 1:
							print("<tr/>", file = fp)
		print("</table>", file = fp)

	def print_sequence(prefix, fp):
		global CPUS
		for i in range(256):
			code = (prefix + " " if prefix != '' else "") + f'{i:02X}'
			has_ins = False
			for cpu in CPUS:
				if CPUNAMES[cpu] == '-':
					continue
				if prefix in T[cpu] and T[cpu][prefix][i] is not None:
					has_ins = True
					break
			if has_ins:
				print("<tr>", file = fp)
				print("<td><tt>" + code + "</tt></td>", file = fp)
				for cpu in CPUS:
					if CPUNAMES[cpu] == '-':
						continue
					if prefix in T[cpu] and type(T[cpu][prefix][i]) is Instruction:
						value = T[cpu][prefix][i]
						# TODO: other forms
						mnems = []
						argss = []
						for form in value.forms:
							if form.mnem not in mnems:
								mnems.append(form.mnem)
							args = ",".join(form.args)
							if args not in argss:
								argss.append(args)
						mnem = "<br/>".join(mnems)
						if '' in argss:
							argss.remove('')
							for i in range(len(argss)):
								argss[i] = '<i>[ ' + argss[i] + ' ]</i>'
						args = "<br/>".join(argss)
						style = value.style
						style = "" if style is None else " class='" + style + "'"
						if len(args) == 0:
							print("<td" + style + " colspan='2'><tt>" + mnem + "</tt></td>", file = fp)
						else:
							print("<td" + style + "><tt>" + mnem + "</tt></td>", file = fp)
							print("<td" + style + "><tt>" + args + "</tt></td>", file = fp)
					else:
						print("<td colspan='2' style='background:gray;'>", file = fp)
				print("</tr>", file = fp)
			has_prefix = False
			for cpu in CPUS:
				if CPUNAMES[cpu] == '-':
					continue
				if code in T[cpu]:
					has_prefix = True
					break
			if has_prefix:
				print_sequence(code, fp)

	fp = begin_part('list_op', fp, "List by opcodes")
	print("<h1>List by opcodes</h1>", file = fp)
	print("<table border='1'>", file = fp)
	print("<tr>", file = fp)
	print("<td/>", file = fp)
	for cpu in CPUS:
		if CPUNAMES[cpu] == '-':
			continue
		print("<td colspan='2'>" + cpu + "</td>", file = fp)
	print("</tr>", file = fp)
	print_sequence('', fp)
	print("</table>", file = fp)

	S = {}

	mnemset = set()
	for cpu in CPUS:
		S[cpu] = {}
		for prefix, table in T[cpu].items():
			for index, value in enumerate(table):
				if type(value) is not Instruction:
					continue
				for form in value.forms:
					mnem = form.mnem
					ops = form.args
					if mnem == 'ADC' and ops == ['A', 'M']:
						print(cpu, prefix, index, mnem, ops)
					S[cpu][(mnem, tuple(ops))] = (prefix + " " if prefix != '' else "") + f'{index:02X}'
					if value.style != 'duplicate':
						mnemset.add((mnem, tuple(ops)))
		#mnemset.update(S[cpu].keys())

	fp = begin_part('list_mnem', fp, "List by mnemonics")
	print("<h1>List by mnemonics</h1>", file = fp)
	print("<table border='1'>", file = fp)
	print("<tr>", file = fp)
	print("<td colspan='2'/>", file = fp)
	for cpu in CPUS:
		if CPUNAMES[cpu] == '-':
			continue
		print("<td>" + cpu + "</td>", file = fp)
	print("</tr>", file = fp)
	for mnem in sorted(mnemset):
		print("<tr>", file = fp)
		if len(mnem[1]) == 0:
			print("<td colspan='2'><tt>" + mnem[0] + "</tt></td>", file = fp)
		else:
			print("<td><tt>" + mnem[0] + "</tt></td>", file = fp)
			print("<td><tt>" + ",".join(mnem[1]) + "</tt></td>", file = fp)
		for cpu in CPUS:
			if CPUNAMES[cpu] == '-':
				continue
			if mnem in S[cpu]:
				print("<td><tt>" + S[cpu][mnem] + "</tt></td>", file = fp)
			else:
				print("<td style='background:gray;'/>", file = fp)
		print("</tr>", file = fp)
	print("</table>", file = fp)

	end_html(fp)

	fp.close()

